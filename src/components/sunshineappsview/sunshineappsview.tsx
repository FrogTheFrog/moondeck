import { DialogBody, DialogButton, DialogControlsSection, DialogControlsSectionHeader, Field, Navigation } from "@decky/ui";
import { FC, ReactNode, useContext } from "react";
import { LabelWithIcon, SunshineAppsSyncButton, ToggleField } from "../shared";
import { useCurrentHostSettings, useCurrentSettings, useGameStreamAppShortcuts } from "../../hooks";
import { HostOff } from "../icons";
import { MoonDeckContext } from "../../contexts";
import { PurgeButton } from "./purgebutton";

export const SunshineAppsView: FC = () => {
  const { settingsManager } = useContext(MoonDeckContext);
  const settings = useCurrentSettings();
  const hostSettings = useCurrentHostSettings();
  const shortcuts = useGameStreamAppShortcuts();

  let syncButton: ReactNode = null;
  if (settings == null || hostSettings === null) {
    syncButton =
      <DialogControlsSection>
        <DialogControlsSectionHeader>Sync with Buddy</DialogControlsSectionHeader>
        <Field
          label={<LabelWithIcon icon={HostOff} label="HOST IS NOT SELECTED" />}
          description="Go to host selection page to select host"
          bottomSeparator="none" />
      </DialogControlsSection>;
  } else {
    syncButton =
      <DialogControlsSection>
        <DialogControlsSectionHeader>Sync with Buddy</DialogControlsSectionHeader>
        <Field
          label="Sync all Sunshine's apps via Buddy"
          description="Steam client might be restarted afterwards!"
          childrenContainerWidth="fixed"
        >
          <SunshineAppsSyncButton hostSettings={hostSettings} />
        </Field>
        <ToggleField
          label="Show button in Quick Access Menu"
          description="Confirmation dialog will not be displayed when using it!"
          value={hostSettings.sunshineApps.showQuickAccessButton}
          setValue={(value) => settingsManager.updateHost((settings) => { settings.sunshineApps.showQuickAccessButton = value; })}
        />
      </DialogControlsSection>;
  }

  let shortcutsList: ReactNode = null;
  if (shortcuts.length > 0) {
    shortcutsList =
      <DialogControlsSection>
        <DialogControlsSectionHeader>Generated Shortcuts</DialogControlsSectionHeader>
        {shortcuts.map((shortcut) => {
          return (
            <Field
              key={shortcut.appId}
              label={shortcut.appName}
              childrenContainerWidth="min"
            >
              <DialogButton onClick={() => Navigation.Navigate(`/library/app/${shortcut.appId}`)}>
                Open
              </DialogButton>
            </Field>
          );
        })}
      </DialogControlsSection>;
  }

  return (
    <DialogBody>
      <DialogControlsSection>
        <DialogControlsSectionHeader>What are the Sunshine Apps?</DialogControlsSectionHeader>
        <Field
          description={
            <>
              <div>These are the non-Steam shortcuts generated by MoonDeck from Sunshine's app list.</div>
              <div>Buddy needs to be configured to access the app list, otherwise this feature will not work!</div>
              <br />
              <div>Sunshine apps support almost all of the usual MoonDeck app features, except closing Steam on host on stream end and changing the app name to AppId.</div>
              <br />
              <div>These shortcuts are host-sensitive - if you change the hostname, they might no longer work!</div>
              <div>In this case you can re-sync. If the names do not change, only the launch options will be updated and artwork will remain.</div>
            </>
          }
          focusable={true}
        />
      </DialogControlsSection>
      <DialogControlsSection>
        <DialogControlsSectionHeader>Cleanup</DialogControlsSectionHeader>
        <Field
          label="Purge all generated shortcuts!"
          description="Steam client might be restarted afterwards!"
          childrenContainerWidth="fixed"
        >
          <PurgeButton shortcuts={shortcuts} />
        </Field>
      </DialogControlsSection>
      {syncButton}
      {shortcutsList}
    </DialogBody>
  );
};
